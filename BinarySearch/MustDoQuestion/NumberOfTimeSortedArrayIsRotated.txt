

//revisited : 
1.
//{ Driver Code Starts
#include <bits/stdc++.h>

using namespace std;


// } Driver Code Ends
//User function template for C++
class Solution{
public:	
	int findKRotation(int arr[], int n) {
	  
	  
// 	  12345

// 	  51

// 	  45123
// 	  34512
// 	  23451
	  int start =0;
	  int end =n-1;
	  
	  
	  while(start<=end)
	  {
	      int mid=start+(end-start)/2;
	      int prev = (mid-1+n)%n;
	      int next = (mid+1+n)%n;
	      
	      if(arr[mid]<=arr[prev] && arr[mid]<=arr[next])
	      return mid;
	      
	      
	      if(arr[mid]>=arr[start] && arr[mid]>=arr[end])
	      {
	          start=mid+1;
	      }
	      else
	      {
	          end=mid-1;
	      }
	  }
	  
	  

	   
	}

};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        int a[n];
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.findKRotation(a, n);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends


#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++
class Solution{
public:	
	int findKRotation(int arr[], int n) {
	   // code here
	   //  12345
	     
	  
// 	  minimum element in rotated sorted array
// prev = mid+n-1%n ;
// next=mid+1%n;

// 1 .  mid<prev && mid<next 
// 2 . take decision where you have to go.


if(n==1)
return 0;

int start=0;
int end=n-1;
while(start<=end)
{
    int mid=start+(end-start)/2;
    int prev=(mid-1+n)%n;
    int next=(mid+1+n)%n;
    
    if(arr[mid]<arr[prev] && arr[mid]<arr[next])
    {
        return mid;
    }
    else if(arr[mid]>=arr[start] && arr[mid]>=arr[end])
    {
        start=mid+1;
    }
    else
    {
     end=mid-1;   
    }
}


 




	   
	}

};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        int a[n];
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        Solution ob;
        auto ans = ob.findKRotation(a, n);
        cout << ans << "\n";
    }
    return 0;
}

// } Driver Code Ends