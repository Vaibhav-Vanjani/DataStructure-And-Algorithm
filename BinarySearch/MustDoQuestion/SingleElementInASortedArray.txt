revisited.
1.

class Solution {
public:


    // 1 1 2 3 3 4 4 5 5
    // 0 1 2 3 4 5 6 7 8

    // 1 1 2 2 6 3 3 4 4
    // 0 1 2 3 4 5 6 7 8
             
    int singleNonDuplicate(vector<int>& arr) {

        if(arr.size()==1)return arr[0];

        int start =0;
        int end =arr.size()-1;

        while(start<=end)
        {
            int mid = start+ (end-start)/2;
            
            if( ((mid-1) >= 0) and ((mid+1) <= (arr.size()-1)) )
            {
            if(arr[mid]!=arr[mid-1] and arr[mid]!=arr[mid+1])
            return arr[mid];
            }
            else
            {
                if((mid-1)==-1)
                {
                    if(arr[mid]!=arr[mid+1])
                    return arr[mid];
                }

                if((mid+1)==arr.size())
                {
                    if(arr[mid]!=arr[mid-1])
                    return arr[mid];
                }
            }

            if(mid%2==0)
            {
                if(mid+1!=arr.size() && arr[mid]==arr[mid+1])
                {
                    start=mid+1;
                }
                else
                {
                    end=mid-1;
                }
            }
            else
            {
                if((mid-1)!=-1 and arr[mid]==arr[mid-1])
                {
                    start=mid+1;
                }
                else
                {
                    end=mid-1;
                }
            }
        }

        return -1;


        
    }
};



class Solution {
public:

// //EXPLANATION:-
// Suppose array is [1, 1, 2, 2, 3, 3, 4, 5, 5]
// we can observe that for each pair, 
// first element takes even position and second element takes odd position
// for example, 1 is appeared as a pair,
// so it takes 0 and 1 positions. similarly for all the pairs also.

// this pattern will be missed when single element is appeared in the array.

// From these points, we can implement algorithm.
// 1. Take left and right pointers . 
//     left points to start of list. right points to end of the list.
// 2. find mid.
//     if mid is even, then it's duplicate should be in next index.
// 	or if mid is odd, then it's duplicate  should be in previous index.
// 	check these two conditions, 
// 	if any of the conditions is satisfied,
// 	then pattern is not missed, 
// 	so check in next half of the array. i.e, left = mid + 1
// 	if condition is not satisfied, then the pattern is missed.
// 	so, single number must be before mid.
// 	so, update end to mid.



    int singleNonDuplicate(vector<int>& nums) {
     
     // 1 1 2 2 3 3 
     int n =nums.size();
     int start =0;
     int end = n-1;

     while(start<=end)
     {
          int mid=start+(end-start)/2;
         int prev = mid-1;
         int next =mid+1;
         if(prev==-1 or next==n)
         {
           if(prev==-1 && next==n)
           {
               return nums[mid];
           }
           else if(prev==-1)
           {
               if(nums[mid]!=nums[mid+1])
               {
                   return nums[mid];
               }
           }
           else
           {
               if(nums[mid]!=nums[mid-1])
               {
                   return nums[mid];
               }
           }
         }
         else{
                if(nums[mid]!=nums[prev] && nums[mid]!=nums[next])
                {
                    return nums[mid];
                }
            }

         
      if((mid%2==0 && nums[mid]==nums[mid+1]) or (mid%2!=0 && nums[mid]==nums[mid-1]))
      {
          start=mid+1;
      }
      else
      {
          end=mid-1;
      }

     }
     return -1;



    }
};